// Mocks generated by Mockito 5.0.17 from annotations
// in bima/test/features/doctor/presentation/pages/doctor_list_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:bima/features/doctor/domain/use_cases/get_all_doctors.dart'
    as _i2;
import 'package:bima/features/doctor/domain/use_cases/update_doctor_detail.dart'
    as _i3;
import 'package:bima/features/doctor/presentation/bloc/bloc/doctor_bloc.dart'
    as _i4;
import 'package:bloc/bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetAllDoctors_0 extends _i1.Fake implements _i2.GetAllDoctors {}

class _FakeUpdateDoctorDetail_1 extends _i1.Fake
    implements _i3.UpdateDoctorDetail {}

class _FakeDoctorState_2 extends _i1.Fake implements _i4.DoctorState {}

/// A class which mocks [DoctorBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockDoctorBloc extends _i1.Mock implements _i4.DoctorBloc {
  @override
  _i2.GetAllDoctors get getAllDoctors =>
      (super.noSuchMethod(Invocation.getter(#getAllDoctors),
          returnValue: _FakeGetAllDoctors_0()) as _i2.GetAllDoctors);
  @override
  _i3.UpdateDoctorDetail get updateDoctorDetail =>
      (super.noSuchMethod(Invocation.getter(#updateDoctorDetail),
          returnValue: _FakeUpdateDoctorDetail_1()) as _i3.UpdateDoctorDetail);
  @override
  _i4.DoctorState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeDoctorState_2()) as _i4.DoctorState);
  @override
  _i5.Stream<_i4.DoctorState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i4.DoctorState>.empty())
          as _i5.Stream<_i4.DoctorState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i4.DoctorEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i4.DoctorEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i4.DoctorState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i4.DoctorEvent>(
          _i6.EventHandler<E, _i4.DoctorState>? handler,
          {_i6.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i6.Transition<_i4.DoctorEvent, _i4.DoctorState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void onChange(_i6.Change<_i4.DoctorState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [DoctorState].
///
/// See the documentation for Mockito's code generation for more information.
class MockDoctorState extends _i1.Mock implements _i4.DoctorState {
  @override
  List<Object> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object>[])
          as List<Object>);
}

/// A class which mocks [DoctorEvent].
///
/// See the documentation for Mockito's code generation for more information.
class MockDoctorEvent extends _i1.Mock implements _i4.DoctorEvent {
  @override
  List<Object> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object>[])
          as List<Object>);
}
